package vulnerability

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/SecurityBrewery/catalyst-analysis/plugin"
)

var _ plugin.Enricher = &CVE{}

type CVE struct{}

func (c *CVE) Info() plugin.ResourceTypeInfo {
	return plugin.ResourceTypeInfo{
		ID:                 "cve",
		Name:               "CVE",
		Attributes:         []string{"assigner", "published", "updated"},
		EnrichmentPatterns: []string{`CVE-\d{4}-\d{4,}`},
	}
}

func (c *CVE) Resource(ctx context.Context, id string) (*plugin.Resource, error) {
	return c.resource(ctx, id)
}

func (c *CVE) Enrich(ctx context.Context, value string) (*plugin.Resource, error) {
	return c.resource(ctx, value)
}

func (c *CVE) resource(ctx context.Context, id string) (*plugin.Resource, error) {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, fmt.Sprintf("https://vulnerability.circl.lu/api/cve/%s", id), nil)
	if err != nil {
		return nil, err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("vulnerability %s not found", id)
	}

	var response vulnerabilityResponse
	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		return nil, err
	}

	if response.CveMetadata.CveID == "" {
		return nil, fmt.Errorf("vulnerability %s not found", id)
	}

	var description string
	for _, desc := range response.Containers.Cna.Descriptions {
		if description == "" || desc.Lang == "en" {
			description = desc.Value
		}
	}

	var url string
	if response.CveMetadata.CveID != "" {
		url = fmt.Sprintf("https://vulnerability.circl.lu/vuln/%s", response.CveMetadata.CveID)
	}

	var attributes []plugin.Attribute
	if response.CveMetadata.AssignerShortName != "" {
		attributes = append(attributes, plugin.Attribute{
			ID:    "assigner",
			Name:  "Assigner",
			Icon:  "User",
			Value: response.CveMetadata.AssignerShortName,
		})
	}

	if response.CveMetadata.DatePublished != "" {
		attributes = append(attributes, plugin.Attribute{
			ID:    "published",
			Name:  "Published",
			Icon:  "Calendar",
			Value: response.CveMetadata.DatePublished,
		})
	}

	if response.CveMetadata.DateUpdated != "" {
		attributes = append(attributes, plugin.Attribute{
			ID:    "updated",
			Name:  "Updated",
			Icon:  "Calendar",
			Value: response.CveMetadata.DateUpdated,
		})
	}

	return &plugin.Resource{
		Type:        c.Info().ID,
		ID:          response.CveMetadata.CveID,
		Name:        response.CveMetadata.CveID,
		Icon:        "Bug",
		Description: description,
		URL:         url,
		Attributes:  attributes,
	}, nil
}
