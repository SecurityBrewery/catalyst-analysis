package vulnerability

import (
	"context"
	"fmt"
	"net/http"

	"github.com/SecurityBrewery/catalyst-analysis/plugin"
)

var (
	_ plugin.Plugin    = &Vulnerability{}
	_ plugin.Connector = &Vulnerability{}
)

type Vulnerability struct{}

func New() *Vulnerability {
	return &Vulnerability{}
}

func (a *Vulnerability) Info() plugin.Info {
	return plugin.Info{
		Name: "Vulnerability",
		ResourceTypes: []plugin.ResourceType{
			&CVE{},
		},
	}
}

func (a *Vulnerability) Connect(ctx context.Context) error {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, "https://vulnerability.circl.lu/api/configInfo", nil)
	if err != nil {
		return err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("vulnerability API not available: %d", resp.StatusCode)
	}

	return nil
}
